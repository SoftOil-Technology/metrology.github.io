---
interface Props {
  type?: "button" | "submit" | "reset";
  id?: string;
  text: string;
  variant?: "primary" | "secondary" | "outline" | "danger" | "success" | "info";
  size?: "sm" | "md" | "lg";
  className?: string;
  fullWidth?: boolean;
  loading?: boolean;
  loadingText?: string;
  icon?: any;
  iconPosition?: "left" | "right";
  disabled?: boolean;
  onClick?: (event: MouseEvent) => void;
}

const {
  type = "button",
  id,
  text,
  variant = "primary",
  size = "md",
  className = "",
  fullWidth = false,
  loading = false,
  loadingText = "Cargando...",
  icon,
  iconPosition = "left",
  disabled = false,
  onClick,
} = Astro.props;

// Crear clases para cada variante de botón
const variantClasses = {
  primary: "bg-primary text-white hover:scale-[1.02] border-transparent",
  secondary: "bg-secondary text-white hover:scale-[1.02] border-transparent",
  outline: "bg-transparent text-primary hover:bg-primary/10 border-primary",
  danger: "bg-red-600 text-white hover:scale-[1.02] border-transparent",
  success: "bg-green-600 text-white hover:scale-[1.02] border-transparent",
  info: "bg-blue-400 text-white hover:scale-[1.02] border-transparent",
};

// Crear clases para cada tamaño
const sizeClasses = {
  sm: "py-1.5 px-3 text-sm",
  md: "py-3 px-6 text-base",
  lg: "py-4 px-8 text-lg",
};

// Combinar las clases
const buttonClasses = `
  ${variantClasses[variant]} 
  ${sizeClasses[size]} 
  ${fullWidth ? "w-full" : ""} 
  font-bold rounded-lg transition-all duration-300 transform
  focus:outline-none focus:ring-2 focus:ring-primary/50
  border flex justify-center items-center cursor-pointer ${className}
`;
---

<button
  type={type}
  id={id}
  class={buttonClasses}
  disabled={disabled || loading}
  data-loading={loading}
>
  {
    loading ? (
      <>
        <svg
          class="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"
          />
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          />
        </svg>
        <span id="loading-text">{loadingText}</span>
      </>
    ) : (
      <>
        {icon && iconPosition === "left" && <span class="mr-2">{icon}</span>}
        <span id="btn-text">{text}</span>
        {icon && iconPosition === "right" && <span class="ml-2">{icon}</span>}
      </>
    )
  }
</button>

<script define:vars={{ id, onClick }}>
  if (id && onClick) {
    const button = document.getElementById(id);
    if (button) {
      button.addEventListener("click", onClick);
    }
  }
</script>

